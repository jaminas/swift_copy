package routers

// @APIVersion 1.0.0
// @Title Swift API
// @Description Autogenerated documentation for swift API
// @Contact jamin@inbox.ru
// @TermsOfServiceUrl http://beego.me/
// @License Self
// @LicenseUrl http://www.apache.org/licenses/LICENSE-2.0.html
import (
	"controllers"
	"database/sql"
	"fmt"
	"github.com/astaxie/beego"
	"github.com/astaxie/beego/toolbox"
	_ "github.com/lib/pq"
	"github.com/speps/go-hashids"
	"service"
)

func init() {

	// init DI

	logger := service.NewLogger()

	db, err := sql.Open("postgres", beego.AppConfig.String("postgres_con"))
	if err != nil {
		logger.Warn(fmt.Sprintf("Postgresql connection error: %v", err))
	}
	//defer db.Close()

	hd := hashids.NewData()
	hd.Salt = beego.AppConfig.String("hash_id_salt_launch")
	hd.MinLength = 16
	h, _ := hashids.NewWithData(hd)

	commit_rows := 10000

	CampaignService := service.NewCampaignService(logger, db)
	CampaignService.Load2Store()

	PayService := service.NewPayService(logger, db, commit_rows)
	PayService.Load2Store()

	RequestService := service.NewRequestService(logger, h)
	ClientService := service.NewClientService(logger)
	InstallService := service.NewInstallService(logger, db, commit_rows)
	ClickhouseService := service.NewClickhouseService(logger, beego.AppConfig.String("clickhouse"), commit_rows)
	ModuleService := service.NewModuleService(logger)
	BusinessLayer := service.NewBusinessLayer(logger, CampaignService, InstallService, PayService, ClickhouseService, ModuleService, h)
	MacrosService := service.NewMacrosService(logger, h)

	ns_view := beego.NewNamespace("/view/:tail",
		beego.NSInclude(
			&controllers.ViewController{
				RequestService:    RequestService,
				ClientService:     ClientService,
				InstallService:    InstallService,
				ClickhouseService: ClickhouseService,
				MacrosService:     MacrosService,
			},
		),
	)
	ns_launch := beego.NewNamespace("/launch/:install",
		beego.NSInclude(
			&controllers.LaunchController{
				RequestService: RequestService,
				ClientService:  ClientService,
				BusinessLayer:  BusinessLayer,
			},
		),
	)

	beego.AddNamespace(ns_view)
	beego.AddNamespace(ns_launch)

	beego.Router("/service/cache/reload", &controllers.ServiceController{
		CampaignService: CampaignService,
		PayService:      PayService,
	}, "get:Get")

	// таск на обновление кешей из БД
	task_reload_cache := toolbox.NewTask("task_reload_cache", "0 5 * * * *", func() error {
		CampaignService.Load2Store()
		PayService.Load2Store()
		return nil
	})

	// таск коммита инсталов и платежей БД
	task_commit_db := toolbox.NewTask("task_commit_db", "0 * * * * *", func() error {
		InstallService.Commit()
		PayService.Commit()
		return nil
	})

	// таск коммита эвентов в КХ
	task_commit_ch := toolbox.NewTask("task_commit_ch", "30 */2 * * * *", func() error {
		ClickhouseService.Commit()
		return nil
	})

	toolbox.AddTask("task_reload_cache", task_reload_cache)
	toolbox.AddTask("task_commit_db", task_commit_db)
	toolbox.AddTask("task_commit_ch", task_commit_ch)
	toolbox.StartTask()

	toolbox.AddHealthCheck("database", &service.DatabaseCheck{})
}
